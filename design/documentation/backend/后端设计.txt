[设计思想]
	基本的设计思想是编写一个可拓展的、便于移植和改编的服务端框架，尽量减少层次之间的耦合，使得未来移植到社团部的财务系统时比较方便。
[整体构架图]
         数据库
           |
      数据库访问层
	  /          \
策略控制层<-->服务提供者
					|
				  服务层
					|
				前端交互层
					|
				   用户
[层次概述]
	前端交互层(Comm)
		负责与用户交互
			接受用户的指令和参数输入，调用相应的服务层接口
			接受服务层操作的结果，封装后返回给用户
			
	服务定义层(Service)
		定义有关具体服务的接口
			例如在南娱项目中需要定义有关“预约”，“用户”，“预约时间段”等等的概念
			核查前端交互层获得的用户指令和参数的合法性
		负责与数据库和策略层交互，获取数据，检查策略等
			具体来说，接受前端交互层的指令和参数，检查指令和参数是否合法
			根据不同的指令请求策略层给出允许操作或者拒绝操作的意见，并提供计算策略所需的参数
			操作被允许后，向数据库访问层提交更新数据库的请求，完成操作
			
	策略控制层(Strategy)
		定义进行操作所需要满足的条件
		对被请求的操作计算相应的条件是否满足，给出是否允许操作的意见
		[提供策略的修改功能]
	
	数据库访问层(Database)
		定义数据库连接情况
		针对常用的数据库操作进行封装
		
[层次实现]
	策略控制层
		策略链
			策略链由一系列相关的策略根据策略优先级组成
			调用层指定要计算的策略链，本层计算并返回策略链的结果，若策略链的计算结果是满足，则调用层进行相关操作；否则，拒绝操作
			计算规则
				从优先级最高的策略开始计算，根据计算结果和策略的跳出形式决定是返回策略链结果还是计算下一条策略
			策略
				策略是对一系列业务状态的约束
				对运行时变量的约束
					变量指称
						由驱动定义并负责解释指称与实际状态变量之间的映射关系
					变量值范围
				对数据库字段的约束
					表名
					字段名
					字段值范围
				可以有多个单元约束条件经简单逻辑组合构成，彼此之间是平等的关系
				优先级
					一条策略链中含有多于一条策略时，计算策略的先后
					策略优先级由策略链定义
					优先级高的先判断结果
					一系列整数
				跳出形式
					否决跳出
						当该策略不满足时，整条策略链的结果为不满足；否则，计算随后的链
					允许跳出
						当该策略满足时，整条策略链的结果为满足；否则，计算随后的链
				最后一条策略
					若最后一条策略计算后仍不符合其跳出条件，为得到策略链结果，需要给整个策略链一个出口
					每条策略链会在最后一条策略后隐式地添加与最后一条策略约束条件相同、跳出形式相反的策略
					以使未能被否决的策略链被通过，未能被通过的策略链被否决
				跳出消息
					错误代码
						标准的错误代码
					错误消息
						可选的错误消息
					发生跳出同时传递给调用层的消息
					一般会一直被传递到用户，以表明具体的判断原因
			有效范围
		表示形式
			XML文档，储存在策略数据表中
			策略链表中存放策略链，以及关联的操作类型
			策略表中存放可重复使用的策略，及其索引号
			策略链通过引用策略表中的策略索引来构建自身
				策略链中也可以包含直接叙述的策略
			样例
				strategy.xml&strategyChain.xml
	数据库访问层
		参见目前的DatabaseDef.php，待完善
	前端交互层
		见相应文档
	服务定义层
		见相应文档